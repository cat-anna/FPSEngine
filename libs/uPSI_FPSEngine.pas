unit uPSI_FPSEngine;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

 
{ compile-time registration functions }
procedure SIRegister_TFPSClassList(CL: TPSPascalCompiler);
procedure SIRegister_TThreadEngine(CL: TPSPascalCompiler);
procedure SIRegister_TFPSEngine(CL: TPSPascalCompiler);
procedure SIRegister_TFPSPlayer(CL: TPSPascalCompiler);
procedure SIRegister_TFPSMap(CL: TPSPascalCompiler);
procedure SIRegister_TFPSData(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicItem(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicDoor(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicEventField(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicKillZone(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicMonster(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicWeapon(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicBullet(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicObject(CL: TPSPascalCompiler);
procedure SIRegister_TFPSBasicSprite(CL: TPSPascalCompiler);
procedure SIRegister_TScriptEngine(CL: TPSPascalCompiler);
procedure SIRegister_TAudioSystem(CL: TPSPascalCompiler);
procedure SIRegister_FPSEngine(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_FPSEngine_Routines(S: TPSExec);
procedure RIRegister_TFPSClassList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TThreadEngine(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSEngine(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSPlayer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSMap(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSData(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicDoor(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicEventField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicKillZone(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicMonster(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicWeapon(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicBullet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFPSBasicSprite(CL: TPSRuntimeClassImporter);
procedure RIRegister_TScriptEngine(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAudioSystem(CL: TPSRuntimeClassImporter);
procedure RIRegister_FPSEngine(CL: TPSRuntimeClassImporter);

implementation


uses
   Windows
  ,Messages
  ,Forms
  ,ZipForge
  ,dglOpengl
  ,FPSEngine
  ;


(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSClassList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TFPSClassList') do
  with CL.AddClassN(CL.FindClass('TList'),'TFPSClassList') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Add( AClass : TFPSBasicClass)');
    RegisterMethod('Function FindByName( AName : string) : TFPSBasicClass');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TThreadEngine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'TThreadEngine') do
  with CL.AddClassN(CL.FindClass('TThread'),'TThreadEngine') do
  begin
    RegisterProperty('Engine', 'TFPSEngine', iptrw);
    RegisterMethod('Procedure DoEnd');
    RegisterProperty('Ended', 'bool', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSEngine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TFPSEngine') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TFPSEngine') do
  begin
    RegisterProperty('ActiveMap', 'TFPSMap', iptrw);
    RegisterProperty('MapData', 'TFPSData', iptrw);
    RegisterProperty('Player', 'TFPSPlayer', iptrw);
    RegisterProperty('Menu', 'integer', iptrw);
    RegisterMethod('Function GetTexture( TexName : string) : TTexture');
    RegisterMethod('Function ShowMenu( Names : TStringList; StartIndex : Integer) : Integer');
    RegisterMethod('Procedure MainMenu');
    RegisterMethod('Procedure OptionsMenu');
    RegisterMethod('Procedure LoadModuleMenu');
    RegisterMethod('Procedure SetActiveMap( NewActive : TFPSMap)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure StartGame');
    RegisterMethod('Procedure DoEnd');
    RegisterMethod('Procedure PlaySound( SndName : string)');
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Initialise( ExtWindow : TForm)');
    RegisterMethod('Procedure Finalize');
    RegisterMethod('Procedure Run');
    RegisterMethod('Function LoadData( FileName : string) : bool');
    RegisterProperty('Ended', 'bool', iptr);
    RegisterProperty('Initialised', 'bool', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSPlayer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TFPSPlayer') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TFPSPlayer') do
  begin
    RegisterProperty('ActiveWeapon', 'TFPSBasicWeapon', iptrw);
    RegisterProperty('Position', 'T3DPoint', iptrw);
    RegisterProperty('Direction', 'Single', iptrw);
    RegisterProperty('HitPoints', 'single', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSMap(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TFPSMap') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TFPSMap') do
  begin
    RegisterProperty('MapName', 'String', iptrw);
    RegisterProperty('FontName', 'String', iptrw);
    RegisterProperty('Objects', 'TList', iptrw);
    RegisterProperty('Fog', 'bool', iptrw);
    RegisterProperty('FogColor', '', iptrw);
    RegisterProperty('SeeRange', 'Single', iptrw);
    RegisterProperty('StartPoint', 'T3Dpoint', iptrw);
    RegisterProperty('StartDirection', 'Single', iptrw);
    RegisterProperty('Owner', 'TFPSData', iptrw);
    RegisterProperty('PlayList', 'TStringList', iptrw);
    RegisterMethod('Constructor Create( aOwner : TFPSData; Data : TStream)');
    RegisterMethod('Procedure LoadMap( MStr : TStream)');
    RegisterMethod('Procedure SaveMap( MStr : TStream)');
    RegisterMethod('Procedure CreateObject( ObjName : String; ObjPos : T3Dpoint)');
    RegisterMethod('Procedure CreateKillZone( Range, DmgPerSek : Single; Creator : TFPSBasicObject)');
    RegisterMethod('Procedure CrerateEventField( EventSource : TFPSEventSource; EventType : TFPSEventType; EventData : TEventData)');
    RegisterMethod('Procedure CreateItem( ItemName : String; ItemPos : T3Dpoint; ItemCount : integer)');
    RegisterMethod('Procedure DestroyObject( Index : integer)');
    RegisterMethod('Procedure Clear( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSData(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TFPSData') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TFPSData') do
  begin
    RegisterProperty('Maps', 'TList', iptrw);
    RegisterProperty('StaticObjects', 'TList', iptrw);
    RegisterProperty('StartMap', 'string', iptrw);
    RegisterProperty('DataFileName', 'string', iptrw);
    RegisterProperty('GameName', 'string', iptrw);
    RegisterProperty('MenuFont', 'string', iptrw);
    RegisterProperty('Textures', 'TStringList', iptrw);
    RegisterProperty('Fonts', 'TStringList', iptrw);
    RegisterProperty('Sounds', 'TStringList', iptrw);
    RegisterProperty('Scripts', 'TStringList', iptrw);
    RegisterProperty('MenuMusic', 'TStringList', iptrw);
    RegisterProperty('OwnerEngine', 'TFPSEngine', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure CreateNew( FName : string)');
    RegisterMethod('Procedure LoadData( FName : string)');
    RegisterMethod('Procedure SaveDataAs( FName : string)');
    RegisterMethod('Procedure Update');
    RegisterMethod('Procedure AddFile( FileType : TMapDataFileType; FileName : string; MStr : TMemoryStream)');
    RegisterMethod('Procedure DeleteFile( FileType : TMapDataFileType; FileName : string)');
    RegisterMethod('Procedure GetFile( FileType : TMapDataFileType; FileName : string; MStr : TMemoryStream)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function GetStartMap : TFPSMap');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicObject', 'TFPSBasicItem') do
  with CL.AddClassN(CL.FindClass('TFPSBasicObject'),'TFPSBasicItem') do
  begin
    RegisterMethod('Procedure DoItemProperty( WhichProperty : TFPSItemProprtyType)');
    RegisterProperty('ItemsCount', 'Word', iptrw);
    RegisterProperty('ProperyData', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicDoor(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicSprite', 'TFPSBasicDoor') do
  with CL.AddClassN(CL.FindClass('TFPSBasicSprite'),'TFPSBasicDoor') do
  begin
    RegisterProperty('OpeningDirection', 'byte', iptrw);
    RegisterProperty('Speed', 'Single', iptrw);
    RegisterProperty('OpenTime', 'Word', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicEventField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicSprite', 'TFPSBasicEventField') do
  with CL.AddClassN(CL.FindClass('TFPSBasicSprite'),'TFPSBasicEventField') do
  begin
    RegisterProperty('EventSource', 'TFPSEventSource', iptrw);
    RegisterProperty('EventType', 'TFPSEventType', iptrw);
    RegisterProperty('EventData', 'TEventData', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicKillZone(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicObject', 'TFPSBasicKillZone') do
  with CL.AddClassN(CL.FindClass('TFPSBasicObject'),'TFPSBasicKillZone') do
  begin
    RegisterProperty('Range', 'Single', iptrw);
    RegisterProperty('DmgPerSek', 'Single', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicMonster(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicObject', 'TFPSBasicMonster') do
  with CL.AddClassN(CL.FindClass('TFPSBasicObject'),'TFPSBasicMonster') do
  begin
    RegisterProperty('Attack', 'Single', iptrw);
    RegisterProperty('Speed', 'Single', iptrw);
    RegisterProperty('SeeRange', 'Single', iptrw);
    RegisterProperty('AtackSpeed', 'Cardinal', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicWeapon(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicSprite', 'TFPSBasicWeapon') do
  with CL.AddClassN(CL.FindClass('TFPSBasicSprite'),'TFPSBasicWeapon') do
  begin
    RegisterMethod('Procedure Shot');
    RegisterProperty('CanShot', 'boolean', iptr);
    RegisterProperty('BulletName', 'string', iptrw);
    RegisterProperty('ShotSound', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicBullet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicSprite', 'TFPSBasicBullet') do
  with CL.AddClassN(CL.FindClass('TFPSBasicSprite'),'TFPSBasicBullet') do
  begin
    RegisterProperty('BasicSpeed', 'Single', iptrw);
    RegisterProperty('SpeedMultiplier', 'byte', iptrw);
    RegisterProperty('LifeTime', 'Cardinal', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TFPSBasicSprite', 'TFPSBasicObject') do
  with CL.AddClassN(CL.FindClass('TFPSBasicSprite'),'TFPSBasicObject') do
  begin
    RegisterProperty('Position', 'T3Dpoint', iptrw);
    RegisterProperty('Visible', 'boolean', iptrw);
    RegisterProperty('Width', 'Single', iptrw);
    RegisterProperty('Height', 'Single', iptrw);
    RegisterProperty('YPosition', 'Single', iptrw);
    RegisterProperty('HitPoints', 'Single', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFPSBasicSprite(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TFPSBasicSprite') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TFPSBasicSprite') do
  begin
    RegisterProperty('DrawPosition', 'TDrawPosition', iptrw);
    RegisterMethod('Procedure RunScript( Event : TFPSBasicEvent; Id : integer)');
    RegisterMethod('Procedure Dead');
    RegisterMethod('Procedure Hit( Power : Single)');
    RegisterMethod('Constructor Create( aEngine : TFPSEngine; aOwner : TFPSMap)');
    RegisterMethod('Procedure SaveToStream( Stream : TStream; SaveAll : bool)');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream; LoadAll : bool)');
    RegisterMethod('Procedure Assign( Item : TFPSBasicSprite)');
    RegisterProperty('OwnerEngine', 'TFPSEngine', iptrw);
    RegisterProperty('OwnerMap', 'TFPSMap', iptrw);
    RegisterProperty('Deaded', 'Boolean', iptr);
    RegisterProperty('Destroyable', 'Boolean', iptrw);
    RegisterProperty('Collision', 'Boolean', iptrw);
    RegisterProperty('ScriptName', 'string', iptrw);
    RegisterProperty('ScriptFunction', 'string', iptrw);
    RegisterProperty('Name', 'string', iptrw);
    RegisterProperty('TextureName', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TScriptEngine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TScriptEngine') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TScriptEngine') do
  begin
    RegisterProperty('SelfPointer', 'TObject', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Function AddScript( ScriptName, Code : String; Messages : PString) : Boolean');
    RegisterMethod('Procedure RunScript( ScriptName : String)');
    RegisterMethod('Function RunFunction( ScriptName, FunctionName : string; Params : array of Variant) : Variant');
    RegisterMethod('Function CheckScript( Code : String; Messages : TStrings) : boolean');
    RegisterProperty('Compiler', 'TPSPascalCompiler', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAudioSystem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TAudioSystem') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TAudioSystem') do
  begin
    RegisterMethod('Procedure Play( SndName : string)');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure AddSound( FileName : string; Data : TStream)');
    RegisterMethod('Procedure SetPlayList( List : TStringList; PlayRandom : bool)');
    RegisterMethod('Procedure StopAll');
    RegisterMethod('Constructor Create');
    RegisterProperty('Enabled', 'bool', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_FPSEngine(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('TurnSpeed','Single').setExtended( 7);
 CL.AddConstantN('CollisionRadius','Extended').setExtended( 0.2);
  CL.AddTypeS('T3DPoint', 'record X : Single; Y : Single; Z : Single; end');
  CL.AddTypeS('TDrawPosition', 'record V1 : T3Dpoint; V2 : T3Dpoint; V3 : T3Dpo'
   +'int; V4 : T3Dpoint; end');
  CL.AddTypeS('TFontData', 'record Name : string; Base : Cardinal; Handle : Car'
   +'dinal; Id : Integer; end');
  CL.AddTypeS('TArea', 'record LeftTop : T3Dpoint; Size : T3Dpoint; end');
  CL.AddTypeS('TEventData', 'record DString : string; DPoint : T3Dpoint; EventA'
   +'rea : TArea; Id : word; end');
  CL.AddTypeS('TTexture', 'record Name : string; FramesCount : Word; Frames : a'
   +'rray of Cardinal; Animated : Boolean; AnimLooped : Boolean; AnimCircled : '
   +'Boolean; AnimForward : Boolean; AnimPos : Single; AnimSpeed : Single; end');
  CL.AddTypeS('TMapDataFileType', '( mdftTexture, mdftFont, mdftSound, mdftScri'
   +'pt, mdftMap )');
  CL.AddTypeS('TFPSEventType', '( etTeleport, etScript )');
  CL.AddTypeS('TFPSEventSource', '( esCollision, esOnUse )');
  CL.AddTypeS('TFPSBasicEvent', '( beCreate, beDead, beAnimationLoop, beCollisi'
   +'on, beUse )');
  CL.AddTypeS('TFPSEventSet', 'set of TFPSBasicEvent');
  CL.AddTypeS('TFPSItemProprtyType', '( iptUse, iptEquip, iptUnEquip )');
  CL.AddTypeS('TLogMsgType', '( lmtNone, lmtError, lmtInfo )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TFPSEngine');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TFPSMap');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TFPSBasicSprite');
  SIRegister_TAudioSystem(CL);
  SIRegister_TScriptEngine(CL);
  SIRegister_TFPSBasicSprite(CL);
  SIRegister_TFPSBasicObject(CL);
  SIRegister_TFPSBasicBullet(CL);
  SIRegister_TFPSBasicWeapon(CL);
  SIRegister_TFPSBasicMonster(CL);
  SIRegister_TFPSBasicKillZone(CL);
  SIRegister_TFPSBasicEventField(CL);
  SIRegister_TFPSBasicDoor(CL);
  SIRegister_TFPSBasicItem(CL);
  SIRegister_TFPSData(CL);
  SIRegister_TFPSMap(CL);
  SIRegister_TFPSPlayer(CL);
  SIRegister_TFPSEngine(CL);
  SIRegister_TThreadEngine(CL);
  //CL.AddTypeS('TFPSBasicClass', 'class of TFPSBasicSprite');
  SIRegister_TFPSClassList(CL);
 CL.AddDelphiFunction('Procedure AddLog2( Msg : string; MsgType : TLogMsgType);');
 CL.AddDelphiFunction('Procedure AddLog( Text : string; Varibles : array of const; MsgType : TLogMsgType);');
 CL.AddConstantN('ModuleExt','String').SetString( '.zip');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure AddLog_P( Text : string; Varibles : array of const; MsgType : TLogMsgType);
Begin FPSEngine.AddLog(Text, Varibles, MsgType); END;

(*----------------------------------------------------------------------------*)
Procedure AddLog2_P( Msg : string; MsgType : TLogMsgType);
Begin FPSEngine.AddLog(Msg, MsgType); END;

(*----------------------------------------------------------------------------*)
procedure TThreadEngineEnded_R(Self: TThreadEngine; var T: bool);
begin T := Self.Ended; end;

(*----------------------------------------------------------------------------*)
procedure TThreadEngineEngine_W(Self: TThreadEngine; const T: TFPSEngine);
Begin Self.Engine := T; end;

(*----------------------------------------------------------------------------*)
procedure TThreadEngineEngine_R(Self: TThreadEngine; var T: TFPSEngine);
Begin T := Self.Engine; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEngineInitialised_R(Self: TFPSEngine; var T: bool);
begin T := Self.Initialised; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEngineEnded_R(Self: TFPSEngine; var T: bool);
begin T := Self.Ended; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEnginePlayer_W(Self: TFPSEngine; const T: TFPSPlayer);
Begin Self.Player := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEnginePlayer_R(Self: TFPSEngine; var T: TFPSPlayer);
Begin T := Self.Player; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEngineMapData_W(Self: TFPSEngine; const T: TFPSData);
Begin Self.MapData := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEngineMapData_R(Self: TFPSEngine; var T: TFPSData);
Begin T := Self.MapData; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEngineActiveMap_W(Self: TFPSEngine; const T: TFPSMap);
Begin Self.ActiveMap := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSEngineActiveMap_R(Self: TFPSEngine; var T: TFPSMap);
Begin T := Self.ActiveMap; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerHitPoints_W(Self: TFPSPlayer; const T: single);
begin Self.HitPoints := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerHitPoints_R(Self: TFPSPlayer; var T: single);
begin T := Self.HitPoints; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerDirection_W(Self: TFPSPlayer; const T: Single);
Begin Self.Direction := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerDirection_R(Self: TFPSPlayer; var T: Single);
Begin T := Self.Direction; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerPosition_W(Self: TFPSPlayer; const T: T3DPoint);
Begin Self.Position := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerPosition_R(Self: TFPSPlayer; var T: T3DPoint);
Begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerActiveWeapon_W(Self: TFPSPlayer; const T: TFPSBasicWeapon);
Begin Self.ActiveWeapon := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSPlayerActiveWeapon_R(Self: TFPSPlayer; var T: TFPSBasicWeapon);
Begin T := Self.ActiveWeapon; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapPlayList_W(Self: TFPSMap; const T: TStringList);
Begin Self.PlayList := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapPlayList_R(Self: TFPSMap; var T: TStringList);
Begin T := Self.PlayList; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapOwner_W(Self: TFPSMap; const T: TFPSData);
Begin Self.Owner := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapOwner_R(Self: TFPSMap; var T: TFPSData);
Begin T := Self.Owner; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapStartDirection_W(Self: TFPSMap; const T: Single);
Begin Self.StartDirection := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapStartDirection_R(Self: TFPSMap; var T: Single);
Begin T := Self.StartDirection; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapStartPoint_W(Self: TFPSMap; const T: T3Dpoint);
Begin Self.StartPoint := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapStartPoint_R(Self: TFPSMap; var T: T3Dpoint);
Begin T := Self.StartPoint; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapSeeRange_W(Self: TFPSMap; const T: Single);
Begin Self.SeeRange := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapSeeRange_R(Self: TFPSMap; var T: Single);
Begin T := Self.SeeRange; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapFog_W(Self: TFPSMap; const T: bool);
Begin Self.Fog := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapFog_R(Self: TFPSMap; var T: bool);
Begin T := Self.Fog; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapObjects_W(Self: TFPSMap; const T: TList);
Begin Self.Objects := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapObjects_R(Self: TFPSMap; var T: TList);
Begin T := Self.Objects; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapFontName_W(Self: TFPSMap; const T: String);
Begin Self.FontName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapFontName_R(Self: TFPSMap; var T: String);
Begin T := Self.FontName; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapMapName_W(Self: TFPSMap; const T: String);
Begin Self.MapName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSMapMapName_R(Self: TFPSMap; var T: String);
Begin T := Self.MapName; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataOwnerEngine_W(Self: TFPSData; const T: TFPSEngine);
Begin Self.OwnerEngine := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataOwnerEngine_R(Self: TFPSData; var T: TFPSEngine);
Begin T := Self.OwnerEngine; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataMenuMusic_W(Self: TFPSData; const T: TStringList);
Begin Self.MenuMusic := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataMenuMusic_R(Self: TFPSData; var T: TStringList);
Begin T := Self.MenuMusic; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataScripts_W(Self: TFPSData; const T: TStringList);
Begin Self.Scripts := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataScripts_R(Self: TFPSData; var T: TStringList);
Begin T := Self.Scripts; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataSounds_W(Self: TFPSData; const T: TStringList);
Begin Self.Sounds := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataSounds_R(Self: TFPSData; var T: TStringList);
Begin T := Self.Sounds; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataFonts_W(Self: TFPSData; const T: TStringList);
Begin Self.Fonts := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataFonts_R(Self: TFPSData; var T: TStringList);
Begin T := Self.Fonts; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataTextures_W(Self: TFPSData; const T: TStringList);
Begin Self.Textures := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataTextures_R(Self: TFPSData; var T: TStringList);
Begin T := Self.Textures; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataMenuFont_W(Self: TFPSData; const T: string);
Begin Self.MenuFont := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataMenuFont_R(Self: TFPSData; var T: string);
Begin T := Self.MenuFont; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataGameName_W(Self: TFPSData; const T: string);
Begin Self.GameName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataGameName_R(Self: TFPSData; var T: string);
Begin T := Self.GameName; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataDataFileName_W(Self: TFPSData; const T: string);
Begin Self.DataFileName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataDataFileName_R(Self: TFPSData; var T: string);
Begin T := Self.DataFileName; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataStartMap_W(Self: TFPSData; const T: string);
Begin Self.StartMap := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataStartMap_R(Self: TFPSData; var T: string);
Begin T := Self.StartMap; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataStaticObjects_W(Self: TFPSData; const T: TList);
Begin Self.StaticObjects := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataStaticObjects_R(Self: TFPSData; var T: TList);
Begin T := Self.StaticObjects; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataMaps_W(Self: TFPSData; const T: TList);
Begin Self.Maps := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSDataMaps_R(Self: TFPSData; var T: TList);
Begin T := Self.Maps; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicItemProperyData_W(Self: TFPSBasicItem; const T: string);
begin Self.ProperyData := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicItemProperyData_R(Self: TFPSBasicItem; var T: string);
begin T := Self.ProperyData; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicItemItemsCount_W(Self: TFPSBasicItem; const T: Word);
begin Self.ItemsCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicItemItemsCount_R(Self: TFPSBasicItem; var T: Word);
begin T := Self.ItemsCount; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicDoorOpenTime_W(Self: TFPSBasicDoor; const T: Word);
begin Self.OpenTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicDoorOpenTime_R(Self: TFPSBasicDoor; var T: Word);
begin T := Self.OpenTime; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicDoorSpeed_W(Self: TFPSBasicDoor; const T: Single);
begin Self.Speed := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicDoorSpeed_R(Self: TFPSBasicDoor; var T: Single);
begin T := Self.Speed; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicDoorOpeningDirection_W(Self: TFPSBasicDoor; const T: byte);
begin Self.OpeningDirection := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicDoorOpeningDirection_R(Self: TFPSBasicDoor; var T: byte);
begin T := Self.OpeningDirection; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicEventFieldEventData_W(Self: TFPSBasicEventField; const T: TEventData);
Begin Self.EventData := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicEventFieldEventData_R(Self: TFPSBasicEventField; var T: TEventData);
Begin T := Self.EventData; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicEventFieldEventType_W(Self: TFPSBasicEventField; const T: TFPSEventType);
Begin Self.EventType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicEventFieldEventType_R(Self: TFPSBasicEventField; var T: TFPSEventType);
Begin T := Self.EventType; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicEventFieldEventSource_W(Self: TFPSBasicEventField; const T: TFPSEventSource);
Begin Self.EventSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicEventFieldEventSource_R(Self: TFPSBasicEventField; var T: TFPSEventSource);
Begin T := Self.EventSource; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicKillZoneDmgPerSek_W(Self: TFPSBasicKillZone; const T: Single);
begin Self.DmgPerSek := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicKillZoneDmgPerSek_R(Self: TFPSBasicKillZone; var T: Single);
begin T := Self.DmgPerSek; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicKillZoneRange_W(Self: TFPSBasicKillZone; const T: Single);
begin Self.Range := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicKillZoneRange_R(Self: TFPSBasicKillZone; var T: Single);
begin T := Self.Range; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterAtackSpeed_W(Self: TFPSBasicMonster; const T: Cardinal);
begin Self.AtackSpeed := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterAtackSpeed_R(Self: TFPSBasicMonster; var T: Cardinal);
begin T := Self.AtackSpeed; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterSeeRange_W(Self: TFPSBasicMonster; const T: Single);
begin Self.SeeRange := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterSeeRange_R(Self: TFPSBasicMonster; var T: Single);
begin T := Self.SeeRange; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterSpeed_W(Self: TFPSBasicMonster; const T: Single);
begin Self.Speed := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterSpeed_R(Self: TFPSBasicMonster; var T: Single);
begin T := Self.Speed; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterAttack_W(Self: TFPSBasicMonster; const T: Single);
begin Self.Attack := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicMonsterAttack_R(Self: TFPSBasicMonster; var T: Single);
begin T := Self.Attack; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicWeaponShotSound_W(Self: TFPSBasicWeapon; const T: string);
begin Self.ShotSound := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicWeaponShotSound_R(Self: TFPSBasicWeapon; var T: string);
begin T := Self.ShotSound; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicWeaponBulletName_W(Self: TFPSBasicWeapon; const T: string);
begin Self.BulletName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicWeaponBulletName_R(Self: TFPSBasicWeapon; var T: string);
begin T := Self.BulletName; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicWeaponCanShot_R(Self: TFPSBasicWeapon; var T: boolean);
begin T := Self.CanShot; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicBulletLifeTime_W(Self: TFPSBasicBullet; const T: Cardinal);
begin Self.LifeTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicBulletLifeTime_R(Self: TFPSBasicBullet; var T: Cardinal);
begin T := Self.LifeTime; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicBulletSpeedMultiplier_W(Self: TFPSBasicBullet; const T: byte);
begin Self.SpeedMultiplier := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicBulletSpeedMultiplier_R(Self: TFPSBasicBullet; var T: byte);
begin T := Self.SpeedMultiplier; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicBulletBasicSpeed_W(Self: TFPSBasicBullet; const T: Single);
begin Self.BasicSpeed := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicBulletBasicSpeed_R(Self: TFPSBasicBullet; var T: Single);
begin T := Self.BasicSpeed; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectHitPoints_W(Self: TFPSBasicObject; const T: Single);
begin Self.HitPoints := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectHitPoints_R(Self: TFPSBasicObject; var T: Single);
begin T := Self.HitPoints; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectYPosition_W(Self: TFPSBasicObject; const T: Single);
begin Self.YPosition := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectYPosition_R(Self: TFPSBasicObject; var T: Single);
begin T := Self.YPosition; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectHeight_W(Self: TFPSBasicObject; const T: Single);
begin Self.Height := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectHeight_R(Self: TFPSBasicObject; var T: Single);
begin T := Self.Height; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectWidth_W(Self: TFPSBasicObject; const T: Single);
begin Self.Width := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectWidth_R(Self: TFPSBasicObject; var T: Single);
begin T := Self.Width; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectVisible_W(Self: TFPSBasicObject; const T: boolean);
begin Self.Visible := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectVisible_R(Self: TFPSBasicObject; var T: boolean);
begin T := Self.Visible; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectPosition_W(Self: TFPSBasicObject; const T: T3Dpoint);
Begin Self.Position := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicObjectPosition_R(Self: TFPSBasicObject; var T: T3Dpoint);
Begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteTextureName_W(Self: TFPSBasicSprite; const T: string);
begin Self.TextureName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteTextureName_R(Self: TFPSBasicSprite; var T: string);
begin T := Self.TextureName; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteName_W(Self: TFPSBasicSprite; const T: string);
begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteName_R(Self: TFPSBasicSprite; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteScriptFunction_W(Self: TFPSBasicSprite; const T: string);
begin Self.ScriptFunction := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteScriptFunction_R(Self: TFPSBasicSprite; var T: string);
begin T := Self.ScriptFunction; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteScriptName_W(Self: TFPSBasicSprite; const T: string);
begin Self.ScriptName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteScriptName_R(Self: TFPSBasicSprite; var T: string);
begin T := Self.ScriptName; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteCollision_W(Self: TFPSBasicSprite; const T: Boolean);
begin Self.Collision := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteCollision_R(Self: TFPSBasicSprite; var T: Boolean);
begin T := Self.Collision; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteDestroyable_W(Self: TFPSBasicSprite; const T: Boolean);
begin Self.Destroyable := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteDestroyable_R(Self: TFPSBasicSprite; var T: Boolean);
begin T := Self.Destroyable; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteDeaded_R(Self: TFPSBasicSprite; var T: Boolean);
begin T := Self.Deaded; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteOwnerMap_W(Self: TFPSBasicSprite; const T: TFPSMap);
begin Self.OwnerMap := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteOwnerMap_R(Self: TFPSBasicSprite; var T: TFPSMap);
begin T := Self.OwnerMap; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteOwnerEngine_W(Self: TFPSBasicSprite; const T: TFPSEngine);
begin Self.OwnerEngine := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteOwnerEngine_R(Self: TFPSBasicSprite; var T: TFPSEngine);
begin T := Self.OwnerEngine; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteDrawPosition_W(Self: TFPSBasicSprite; const T: TDrawPosition);
Begin Self.DrawPosition := T; end;

(*----------------------------------------------------------------------------*)
procedure TFPSBasicSpriteDrawPosition_R(Self: TFPSBasicSprite; var T: TDrawPosition);
Begin T := Self.DrawPosition; end;

(*----------------------------------------------------------------------------*)
procedure TScriptEngineCompiler_R(Self: TScriptEngine; var T: TPSPascalCompiler);
begin T := Self.Compiler; end;

(*----------------------------------------------------------------------------*)
procedure TScriptEngineSelfPointer_W(Self: TScriptEngine; const T: TObject);
Begin Self.SelfPointer := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptEngineSelfPointer_R(Self: TScriptEngine; var T: TObject);
Begin T := Self.SelfPointer; end;

(*----------------------------------------------------------------------------*)
procedure TAudioSystemEnabled_W(Self: TAudioSystem; const T: bool);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TAudioSystemEnabled_R(Self: TAudioSystem; var T: bool);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_FPSEngine_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@AddLog, 'AddLog', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSClassList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSClassList) do
  begin
    RegisterConstructor(@TFPSClassList.Create, 'Create');
    RegisterMethod(@TFPSClassList.Add, 'Add');
    RegisterMethod(@TFPSClassList.FindByName, 'FindByName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TThreadEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TThreadEngine) do
  begin
    RegisterPropertyHelper(@TThreadEngineEngine_R,@TThreadEngineEngine_W,'Engine');
    RegisterMethod(@TThreadEngine.DoEnd, 'DoEnd');
    RegisterPropertyHelper(@TThreadEngineEnded_R,nil,'Ended');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSEngine) do
  begin
    RegisterPropertyHelper(@TFPSEngineActiveMap_R,@TFPSEngineActiveMap_W,'ActiveMap');
    RegisterPropertyHelper(@TFPSEngineMapData_R,@TFPSEngineMapData_W,'MapData');
    RegisterPropertyHelper(@TFPSEnginePlayer_R,@TFPSEnginePlayer_W,'Player');
    RegisterMethod(@TFPSEngine.SetActiveMap, 'SetActiveMap');
    RegisterMethod(@TFPSEngine.Clear, 'Clear');
    RegisterMethod(@TFPSEngine.StartGame, 'StartGame');
    RegisterMethod(@TFPSEngine.DoEnd, 'DoEnd');
    RegisterMethod(@TFPSEngine.PlaySound, 'PlaySound');
    RegisterConstructor(@TFPSEngine.Create, 'Create');
    RegisterMethod(@TFPSEngine.Initialise, 'Initialise');
    RegisterMethod(@TFPSEngine.Finalize, 'Finalize');
    RegisterMethod(@TFPSEngine.Run, 'Run');
    RegisterMethod(@TFPSEngine.LoadData, 'LoadData');
    RegisterPropertyHelper(@TFPSEngineEnded_R,nil,'Ended');
    RegisterPropertyHelper(@TFPSEngineInitialised_R,nil,'Initialised');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSPlayer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSPlayer) do
  begin
    RegisterPropertyHelper(@TFPSPlayerActiveWeapon_R,@TFPSPlayerActiveWeapon_W,'ActiveWeapon');
    RegisterPropertyHelper(@TFPSPlayerPosition_R,@TFPSPlayerPosition_W,'Position');
    RegisterPropertyHelper(@TFPSPlayerDirection_R,@TFPSPlayerDirection_W,'Direction');
    RegisterPropertyHelper(@TFPSPlayerHitPoints_R,@TFPSPlayerHitPoints_W,'HitPoints');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSMap(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSMap) do
  begin
    RegisterPropertyHelper(@TFPSMapMapName_R,@TFPSMapMapName_W,'MapName');
    RegisterPropertyHelper(@TFPSMapFontName_R,@TFPSMapFontName_W,'FontName');
    RegisterPropertyHelper(@TFPSMapObjects_R,@TFPSMapObjects_W,'Objects');
    RegisterPropertyHelper(@TFPSMapFog_R,@TFPSMapFog_W,'Fog');
    RegisterPropertyHelper(@TFPSMapSeeRange_R,@TFPSMapSeeRange_W,'SeeRange');
    RegisterPropertyHelper(@TFPSMapStartPoint_R,@TFPSMapStartPoint_W,'StartPoint');
    RegisterPropertyHelper(@TFPSMapStartDirection_R,@TFPSMapStartDirection_W,'StartDirection');
    RegisterPropertyHelper(@TFPSMapOwner_R,@TFPSMapOwner_W,'Owner');
    RegisterPropertyHelper(@TFPSMapPlayList_R,@TFPSMapPlayList_W,'PlayList');
    RegisterConstructor(@TFPSMap.Create, 'Create');
    RegisterMethod(@TFPSMap.LoadMap, 'LoadMap');
    RegisterMethod(@TFPSMap.SaveMap, 'SaveMap');
    RegisterMethod(@TFPSMap.CreateObject, 'CreateObject');
    RegisterMethod(@TFPSMap.CreateKillZone, 'CreateKillZone');
    RegisterMethod(@TFPSMap.CrerateEventField, 'CrerateEventField');
    RegisterMethod(@TFPSMap.CreateItem, 'CreateItem');
    RegisterMethod(@TFPSMap.DestroyObject, 'DestroyObject');
    RegisterMethod(@TFPSMap.Clear, 'Clear');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSData(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSData) do
  begin
    RegisterPropertyHelper(@TFPSDataMaps_R,@TFPSDataMaps_W,'Maps');
    RegisterPropertyHelper(@TFPSDataStaticObjects_R,@TFPSDataStaticObjects_W,'StaticObjects');
    RegisterPropertyHelper(@TFPSDataStartMap_R,@TFPSDataStartMap_W,'StartMap');
    RegisterPropertyHelper(@TFPSDataDataFileName_R,@TFPSDataDataFileName_W,'DataFileName');
    RegisterPropertyHelper(@TFPSDataGameName_R,@TFPSDataGameName_W,'GameName');
    RegisterPropertyHelper(@TFPSDataMenuFont_R,@TFPSDataMenuFont_W,'MenuFont');
    RegisterPropertyHelper(@TFPSDataTextures_R,@TFPSDataTextures_W,'Textures');
    RegisterPropertyHelper(@TFPSDataFonts_R,@TFPSDataFonts_W,'Fonts');
    RegisterPropertyHelper(@TFPSDataSounds_R,@TFPSDataSounds_W,'Sounds');
    RegisterPropertyHelper(@TFPSDataScripts_R,@TFPSDataScripts_W,'Scripts');
    RegisterPropertyHelper(@TFPSDataMenuMusic_R,@TFPSDataMenuMusic_W,'MenuMusic');
    RegisterPropertyHelper(@TFPSDataOwnerEngine_R,@TFPSDataOwnerEngine_W,'OwnerEngine');
    RegisterConstructor(@TFPSData.Create, 'Create');
    RegisterMethod(@TFPSData.CreateNew, 'CreateNew');
    RegisterMethod(@TFPSData.LoadData, 'LoadData');
    RegisterMethod(@TFPSData.SaveDataAs, 'SaveDataAs');
    RegisterMethod(@TFPSData.Update, 'Update');
    RegisterMethod(@TFPSData.AddFile, 'AddFile');
    RegisterMethod(@TFPSData.DeleteFile, 'DeleteFile');
    RegisterMethod(@TFPSData.GetFile, 'GetFile');
    RegisterMethod(@TFPSData.Clear, 'Clear');
    RegisterMethod(@TFPSData.GetStartMap, 'GetStartMap');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicItem) do
  begin
    RegisterVirtualMethod(@TFPSBasicItem.DoItemProperty, 'DoItemProperty');
    RegisterPropertyHelper(@TFPSBasicItemItemsCount_R,@TFPSBasicItemItemsCount_W,'ItemsCount');
    RegisterPropertyHelper(@TFPSBasicItemProperyData_R,@TFPSBasicItemProperyData_W,'ProperyData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicDoor(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicDoor) do
  begin
    RegisterPropertyHelper(@TFPSBasicDoorOpeningDirection_R,@TFPSBasicDoorOpeningDirection_W,'OpeningDirection');
    RegisterPropertyHelper(@TFPSBasicDoorSpeed_R,@TFPSBasicDoorSpeed_W,'Speed');
    RegisterPropertyHelper(@TFPSBasicDoorOpenTime_R,@TFPSBasicDoorOpenTime_W,'OpenTime');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicEventField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicEventField) do
  begin
    RegisterPropertyHelper(@TFPSBasicEventFieldEventSource_R,@TFPSBasicEventFieldEventSource_W,'EventSource');
    RegisterPropertyHelper(@TFPSBasicEventFieldEventType_R,@TFPSBasicEventFieldEventType_W,'EventType');
    RegisterPropertyHelper(@TFPSBasicEventFieldEventData_R,@TFPSBasicEventFieldEventData_W,'EventData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicKillZone(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicKillZone) do
  begin
    RegisterPropertyHelper(@TFPSBasicKillZoneRange_R,@TFPSBasicKillZoneRange_W,'Range');
    RegisterPropertyHelper(@TFPSBasicKillZoneDmgPerSek_R,@TFPSBasicKillZoneDmgPerSek_W,'DmgPerSek');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicMonster(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicMonster) do
  begin
    RegisterPropertyHelper(@TFPSBasicMonsterAttack_R,@TFPSBasicMonsterAttack_W,'Attack');
    RegisterPropertyHelper(@TFPSBasicMonsterSpeed_R,@TFPSBasicMonsterSpeed_W,'Speed');
    RegisterPropertyHelper(@TFPSBasicMonsterSeeRange_R,@TFPSBasicMonsterSeeRange_W,'SeeRange');
    RegisterPropertyHelper(@TFPSBasicMonsterAtackSpeed_R,@TFPSBasicMonsterAtackSpeed_W,'AtackSpeed');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicWeapon(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicWeapon) do
  begin
    RegisterVirtualMethod(@TFPSBasicWeapon.Shot, 'Shot');
    RegisterPropertyHelper(@TFPSBasicWeaponCanShot_R,nil,'CanShot');
    RegisterPropertyHelper(@TFPSBasicWeaponBulletName_R,@TFPSBasicWeaponBulletName_W,'BulletName');
    RegisterPropertyHelper(@TFPSBasicWeaponShotSound_R,@TFPSBasicWeaponShotSound_W,'ShotSound');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicBullet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicBullet) do
  begin
    RegisterPropertyHelper(@TFPSBasicBulletBasicSpeed_R,@TFPSBasicBulletBasicSpeed_W,'BasicSpeed');
    RegisterPropertyHelper(@TFPSBasicBulletSpeedMultiplier_R,@TFPSBasicBulletSpeedMultiplier_W,'SpeedMultiplier');
    RegisterPropertyHelper(@TFPSBasicBulletLifeTime_R,@TFPSBasicBulletLifeTime_W,'LifeTime');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicObject) do
  begin
    RegisterPropertyHelper(@TFPSBasicObjectPosition_R,@TFPSBasicObjectPosition_W,'Position');
    RegisterPropertyHelper(@TFPSBasicObjectVisible_R,@TFPSBasicObjectVisible_W,'Visible');
    RegisterPropertyHelper(@TFPSBasicObjectWidth_R,@TFPSBasicObjectWidth_W,'Width');
    RegisterPropertyHelper(@TFPSBasicObjectHeight_R,@TFPSBasicObjectHeight_W,'Height');
    RegisterPropertyHelper(@TFPSBasicObjectYPosition_R,@TFPSBasicObjectYPosition_W,'YPosition');
    RegisterPropertyHelper(@TFPSBasicObjectHitPoints_R,@TFPSBasicObjectHitPoints_W,'HitPoints');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFPSBasicSprite(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSBasicSprite) do
  begin
    RegisterPropertyHelper(@TFPSBasicSpriteDrawPosition_R,@TFPSBasicSpriteDrawPosition_W,'DrawPosition');
    RegisterVirtualMethod(@TFPSBasicSprite.RunScript, 'RunScript');
    RegisterMethod(@TFPSBasicSprite.Dead, 'Dead');
    RegisterVirtualMethod(@TFPSBasicSprite.Hit, 'Hit');
    RegisterVirtualConstructor(@TFPSBasicSprite.Create, 'Create');
    RegisterVirtualMethod(@TFPSBasicSprite.SaveToStream, 'SaveToStream');
    RegisterVirtualMethod(@TFPSBasicSprite.LoadFromStream, 'LoadFromStream');
    RegisterVirtualMethod(@TFPSBasicSprite.Assign, 'Assign');
    RegisterPropertyHelper(@TFPSBasicSpriteOwnerEngine_R,@TFPSBasicSpriteOwnerEngine_W,'OwnerEngine');
    RegisterPropertyHelper(@TFPSBasicSpriteOwnerMap_R,@TFPSBasicSpriteOwnerMap_W,'OwnerMap');
    RegisterPropertyHelper(@TFPSBasicSpriteDeaded_R,nil,'Deaded');
    RegisterPropertyHelper(@TFPSBasicSpriteDestroyable_R,@TFPSBasicSpriteDestroyable_W,'Destroyable');
    RegisterPropertyHelper(@TFPSBasicSpriteCollision_R,@TFPSBasicSpriteCollision_W,'Collision');
    RegisterPropertyHelper(@TFPSBasicSpriteScriptName_R,@TFPSBasicSpriteScriptName_W,'ScriptName');
    RegisterPropertyHelper(@TFPSBasicSpriteScriptFunction_R,@TFPSBasicSpriteScriptFunction_W,'ScriptFunction');
    RegisterPropertyHelper(@TFPSBasicSpriteName_R,@TFPSBasicSpriteName_W,'Name');
    RegisterPropertyHelper(@TFPSBasicSpriteTextureName_R,@TFPSBasicSpriteTextureName_W,'TextureName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TScriptEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TScriptEngine) do
  begin
    RegisterPropertyHelper(@TScriptEngineSelfPointer_R,@TScriptEngineSelfPointer_W,'SelfPointer');
    RegisterConstructor(@TScriptEngine.Create, 'Create');
    RegisterMethod(@TScriptEngine.AddScript, 'AddScript');
    RegisterMethod(@TScriptEngine.RunScript, 'RunScript');
    RegisterMethod(@TScriptEngine.RunFunction, 'RunFunction');
    RegisterMethod(@TScriptEngine.CheckScript, 'CheckScript');
    RegisterPropertyHelper(@TScriptEngineCompiler_R,nil,'Compiler');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAudioSystem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAudioSystem) do
  begin
    RegisterMethod(@TAudioSystem.Play, 'Play');
    RegisterMethod(@TAudioSystem.Clear, 'Clear');
    RegisterMethod(@TAudioSystem.AddSound, 'AddSound');
    RegisterMethod(@TAudioSystem.SetPlayList, 'SetPlayList');
    RegisterMethod(@TAudioSystem.StopAll, 'StopAll');
    RegisterConstructor(@TAudioSystem.Create, 'Create');
    RegisterPropertyHelper(@TAudioSystemEnabled_R,@TAudioSystemEnabled_W,'Enabled');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_FPSEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFPSEngine) do
  with CL.Add(TFPSMap) do
  with CL.Add(TFPSBasicSprite) do
  RIRegister_TAudioSystem(CL);
  RIRegister_TScriptEngine(CL);
  RIRegister_TFPSBasicSprite(CL);
  RIRegister_TFPSBasicObject(CL);
  RIRegister_TFPSBasicBullet(CL);
  RIRegister_TFPSBasicWeapon(CL);
  RIRegister_TFPSBasicMonster(CL);
  RIRegister_TFPSBasicKillZone(CL);
  RIRegister_TFPSBasicEventField(CL);
  RIRegister_TFPSBasicDoor(CL);
  RIRegister_TFPSBasicItem(CL);
  RIRegister_TFPSData(CL);
  RIRegister_TFPSMap(CL);
  RIRegister_TFPSPlayer(CL);
  RIRegister_TFPSEngine(CL);
  RIRegister_TThreadEngine(CL);
  RIRegister_TFPSClassList(CL);
end;

end.
